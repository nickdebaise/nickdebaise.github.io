"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[893],{7006:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"api/use-toaster","title":"useToaster()","description":"The useToaster hook provides a way to handle the state of toasts within your React components. It manages toast lifecycle events, rendering, and animations. This hook integrates seamlessly with the `` component and the `toast()` API.","source":"@site/docs/api/use-toaster.md","sourceDirName":"api","slug":"/api/use-toaster","permalink":"/packages/react-native-toast/api/use-toaster","draft":false,"unlisted":false,"editUrl":"https://github.com/backpackapp-io/react-native-toast/website/docs/api/use-toaster.md","tags":[],"version":"current","frontMatter":{"id":"use-toaster","title":"useToaster()","sidebar_label":"useToaster()","slug":"/api/use-toaster"},"sidebar":"tutorialSidebar","previous":{"title":"toast()","permalink":"/packages/react-native-toast/api/toast"},"next":{"title":"Animations","permalink":"/packages/react-native-toast/features/animations"}}');var a=s(4848),o=s(8453);const r={id:"use-toaster",title:"useToaster()",sidebar_label:"useToaster()",slug:"/api/use-toaster"},i=void 0,c={},l=[{value:"<strong>Importing</strong>",id:"importing",level:2},{value:"Usage",id:"usage",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Integration with <code>&lt;Toasts /&gt;</code>",id:"integration-with-toasts-",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"useToaster"})," hook provides a way to handle the state of toasts within your React components. It manages toast lifecycle events, rendering, and animations. This hook integrates seamlessly with the ",(0,a.jsx)(t.code,{children:"<Toasts />"})," component and the ",(0,a.jsx)(t.code,{children:"toast()"})," API."]}),"\n",(0,a.jsx)(t.h2,{id:"importing",children:(0,a.jsx)(t.strong,{children:"Importing"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:"import { useToaster } from '@backpackapp-io/react-native-toast';\n"})}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsxs)(t.p,{children:["The useToaster hook is typically used internally by the ",(0,a.jsx)(t.code,{children:"<Toasts />"})," component but can also be leveraged for advanced customization."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const { toasts, handlers } = useToaster();\n"})}),"\n",(0,a.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsx)(t.p,{children:"The useToaster hook returns an object with the following properties:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"toasts"}),"\n"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Type: Toast[]"}),"\n",(0,a.jsx)(t.li,{children:"Description: An array of active toasts currently managed by the hook."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const { toasts } = useToaster();\nconsole.log(toasts); // [{ id: '1', message: 'Toast 1', ... }]\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"2",children:["\n",(0,a.jsx)(t.li,{children:"handlers"}),"\n"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Type: ToastHandlers"}),"\n",(0,a.jsx)(t.li,{children:"Description: An object containing methods to interact with the toasts."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"handlers: {\n  endPause: () => void,\n  updateHeight: (toastId: string, height: number) => void,\n  startPause: () => void,\n  calculateOffset: (toast: Toast, opts?: {reverseOrder?: boolean, gutter?: number, defaultPosition?: ToastPosition}) => number}\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,a.jsx)(t.p,{children:"You can combine useToaster with custom components for advanced use cases:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"import React from 'react';\nimport { useToaster } from '@backpackapp-io/react-native-toast';\n\nexport const CustomToaster = () => {\n  const { toasts } = useToaster();\n\n  useEffect(() => {\n    toasts.forEach((toast) => {\n      if(toast.id === 'ERROR') {\n        console.error(toast.message);\n      }\n    });\n  }, [toasts]);\n};\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"integration-with-toasts-",children:["Integration with ",(0,a.jsx)(t.code,{children:"<Toasts />"})]}),"\n",(0,a.jsxs)(t.p,{children:["useToaster is used internally by the ",(0,a.jsx)(t.code,{children:"<Toasts />"})," component to render toasts. You can still use this hook if you want to create a custom implementation of ",(0,a.jsx)(t.code,{children:"<Toasts />"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>i});var n=s(6540);const a={},o=n.createContext(a);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);