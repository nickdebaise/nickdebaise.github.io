"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[161],{7761:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"features/toast-handlers","title":"Toast Handlers Examples","description":"Basic Usage with Individual Handlers","source":"@site/docs/features/toast-handlers.md","sourceDirName":"features","slug":"/api/toast-toast-handlers","permalink":"/packages/react-native-toast/api/toast-toast-handlers","draft":false,"unlisted":false,"editUrl":"https://github.com/backpackapp-io/react-native-toast/website/docs/features/toast-handlers.md","tags":[],"version":"current","frontMatter":{"id":"toast-handlers","title":"Toast Handlers Examples","hide_title":false,"sidebar_label":"Toast Handler Examples","slug":"/api/toast-toast-handlers"},"sidebar":"tutorialSidebar","previous":{"title":"Customization","permalink":"/packages/react-native-toast/features/customization"}}');var a=e(4848),i=e(8453);const o={id:"toast-handlers",title:"Toast Handlers Examples",hide_title:!1,sidebar_label:"Toast Handler Examples",slug:"/api/toast-toast-handlers"},d="Usage Examples",r={},l=[{value:"Basic Usage with Individual Handlers",id:"basic-usage-with-individual-handlers",level:2},{value:"Handling Different Dismiss Reasons",id:"handling-different-dismiss-reasons",level:2},{value:"Accessing Component State in Handlers",id:"accessing-component-state-in-handlers",level:2},{value:"Toast with Undo Functionality",id:"toast-with-undo-functionality",level:2},{value:"Programmatically Dismissing with Reason",id:"programmatically-dismissing-with-reason",level:2}];function c(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"usage-examples",children:"Usage Examples"})}),"\n",(0,a.jsx)(t.h2,{id:"basic-usage-with-individual-handlers",children:"Basic Usage with Individual Handlers"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"import { toast, DismissReason } from '@backpackapp-io/react-native-toast';\n\n// Simple toast with individual handlers\ntoast('Operation completed', {\n  onShow: (toast) => {\n    console.log(`Toast ${toast.id} appeared`);\n    analytics.track('toast_shown', { id: toast.id });\n  },\n  onHide: (toast, reason) => {\n    console.log(`Toast ${toast.id} disappeared because: ${reason}`);\n    analytics.track('toast_hidden', { id: toast.id, reason });\n  },\n  onPress: (toast) => {\n    console.log(`Toast ${toast.id} was pressed`);\n    navigation.navigate('Details');\n  }\n});\n"})}),"\n",(0,a.jsx)(t.h2,{id:"handling-different-dismiss-reasons",children:"Handling Different Dismiss Reasons"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"toast.success('Item added to cart', {\n  onHide: (toast, reason) => {\n    switch (reason) {\n      case DismissReason.TIMEOUT:\n        // User didn't interact with the toast\n        console.log('User didn\\'t interact with cart notification');\n        break;\n\n      case DismissReason.SWIPE:\n        // User actively dismissed the toast\n        console.log('User dismissed cart notification');\n        break;\n\n      case DismissReason.TAP:\n        // User tapped the toast\n        console.log('User tapped cart notification');\n        break;\n\n      case DismissReason.PROGRAMMATIC:\n        // Toast was dismissed by code\n        console.log('Cart notification was programmatically dismissed');\n        break;\n    }\n  }\n});\n"})}),"\n",(0,a.jsx)(t.h2,{id:"accessing-component-state-in-handlers",children:"Accessing Component State in Handlers"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"function ProductScreen() {\n  const [quantity, setQuantity] = useState(1);\n  const { addToCart } = useCart();\n  const navigation = useNavigation();\n\n  const handleAddToCart = (productId) => {\n    // Add product to cart\n    addToCart(productId, quantity);\n\n    // Show toast with access to component state\n    toast.success('Added to cart', {\n      onPress: (toast) => {\n        // Access component state and navigation here\n        navigation.navigate('Cart', {\n          recentlyAdded: productId,\n          quantity\n        });\n      },\n      duration: 3000\n    });\n  };\n\n  return (\n    <View>\n      <Text>Quantity: {quantity}</Text>\n      <Button\n        title=\"+\"\n        onPress={() => setQuantity(q => q + 1)}\n      />\n      <Button\n        title=\"Add to Cart\"\n        onPress={() => handleAddToCart('product-123')}\n      />\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"toast-with-undo-functionality",children:"Toast with Undo Functionality"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"function EmailList() {\n  const { deleteEmail, restoreEmail } = useEmails();\n\n  const handleDelete = (emailId) => {\n    // Delete the email\n    deleteEmail(emailId);\n\n    // Show toast with undo button\n    toast('Email deleted', {\n      duration: 5000,\n      onPress: (toast) => {\n        // Restore the email when toast is pressed\n        restoreEmail(emailId);\n\n        // Dismiss the toast\n        toast.dismiss(toast.id);\n\n        // Show confirmation\n        toast.success('Email restored');\n      },\n      // Can also check dismiss reason\n      onHide: (toast, reason) => {\n        if (reason !== DismissReason.TAP) {\n          // If toast wasn't tapped (undo wasn't clicked),\n          // permanently delete the email\n          console.log('Email permanently deleted');\n        }\n      }\n    });\n  };\n\n  return (\n    <FlatList\n      data={emails}\n      renderItem={({ item }) => (\n        <EmailItem\n          email={item}\n          onDelete={() => handleDelete(item.id)}\n        />\n      )}\n    />\n  );\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"programmatically-dismissing-with-reason",children:"Programmatically Dismissing with Reason"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"function UploadScreen() {\n  const [uploadId, setUploadId] = useState(null);\n\n  const startUpload = async () => {\n    // Show loading toast\n    const id = toast.loading('Uploading file...');\n    setUploadId(id);\n\n    try {\n      await uploadFile();\n      // Success - update toast\n      toast.success('Upload complete!', { id });\n    } catch (error) {\n      // Error - dismiss with custom reason\n      toast.dismiss(id, DismissReason.PROGRAMMATIC);\n\n      // Show error toast\n      toast.error('Upload failed');\n    }\n  };\n\n  const cancelUpload = () => {\n    if (uploadId) {\n      // Dismiss with custom reason\n      toast.dismiss(uploadId, DismissReason.PROGRAMMATIC);\n      toast('Upload cancelled');\n    }\n  };\n\n  return (\n    <View>\n      <Button title=\"Start Upload\" onPress={startUpload} />\n      <Button title=\"Cancel\" onPress={cancelUpload} />\n    </View>\n  );\n}\n"})})]})}function u(n={}){const{wrapper:t}={...(0,i.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>o,x:()=>d});var s=e(6540);const a={},i=s.createContext(a);function o(n){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function d(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),s.createElement(i.Provider,{value:t},n.children)}}}]);