"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[27],{4924:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"features/animations","title":"Animations","description":"Animation Types","source":"@site/docs/features/animations.md","sourceDirName":"features","slug":"/features/animations","permalink":"/packages/react-native-toast/features/animations","draft":false,"unlisted":false,"editUrl":"https://github.com/backpackapp-io/react-native-toast/website/docs/features/animations.md","tags":[],"version":"current","frontMatter":{"id":"animations","title":"Animations","sidebar_label":"Animations","slug":"/features/animations"},"sidebar":"tutorialSidebar","previous":{"title":"useToaster()","permalink":"/packages/react-native-toast/api/use-toaster"},"next":{"title":"Accessibility","permalink":"/packages/react-native-toast/features/accessibility"}}');var a=e(4848),o=e(8453);const s={id:"animations",title:"Animations",sidebar_label:"Animations",slug:"/features/animations"},r=void 0,c={},l=[{value:"Animation Types",id:"animation-types",level:2},{value:"Animation Config",id:"animation-config",level:2},{value:"Animated Loading Spinner",id:"animated-loading-spinner",level:2}];function d(n){const i={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h2,{id:"animation-types",children:"Animation Types"}),"\n",(0,a.jsx)(i.p,{children:"You can choose two different types of enter/exit animations"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"timing"})," - This is the default animation type. It uses Reanimated withTiming function to animate the component."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"spring"})," - This animation type uses Reanimated withSpring function to animate the component."]}),"\n"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-js",children:"toast('Spring Animation', {\n  animationType: 'spring',\n});\n\ntoast('Default Timing Animation');\n"})}),"\n",(0,a.jsx)(i.h2,{id:"animation-config",children:"Animation Config"}),"\n",(0,a.jsx)(i.p,{children:"You can also customize the options passed to the withTiming/withSpring function."}),"\n",(0,a.jsx)(i.p,{children:"In addition, you can customize the animation duration and fling return duration."}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"duration controls the duration of the opacity fade in/out."}),"\n"]}),"\n",(0,a.jsxs)(i.li,{children:["\n",(0,a.jsx)(i.p,{children:"fling return duration controls the duration of the fling return animation once the component is released."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-js",children:"toast('Custom Animation', {\n  animationType: 'timing',\n  animationConfig: {\n    duration: 500,\n    flingPositionReturnDuration: 500,\n  },\n});\n\n// ...\n\ntoast('Custom Spring Animation', {\n  animationType: 'spring',\n  animationConfig: {\n    damping: 10,\n    stiffness: 80,\n    mass: 0.8,\n    overshootClamping: false,\n    restDisplacementThreshold: 0.01,\n    restSpeedThreshold: 0.01,\n    duration: 500, // Note: you can still use duration which won't affect the spring animation but the opacity fade in/out\n  },\n});\n"})}),"\n",(0,a.jsx)(i.h2,{id:"animated-loading-spinner",children:"Animated Loading Spinner"}),"\n",(0,a.jsx)(i.p,{children:"To create a custom loading animation, create a custom message component."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-js",children:"\nconst LoadingMessage = ({ msg }: { msg: string }) => {\n  const isDarkMode = useColorScheme() === 'dark';\n\n  return (\n    <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n      <ActivityIndicator style={{ marginRight: 16 }} />\n      <Text\n        style={{\n          color: isDarkMode ? 'black' : 'white',\n        }}\n      >\n        {msg}\n      </Text>\n    </View>\n  );\n};\n\ntoast.loading(<LoadingMessage msg=\"Loading...\" />, {\n  animationType: 'timing',\n  animationConfig: {\n    duration: 500,\n    flingPositionReturnDuration: 500,\n  },\n})\n\n// ...\n\ntoast.promise(\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Promise resolved')\n    }, 2000)\n  }),\n  {\n    loading: <LoadingMessage msg=\"Loading...\" />,\n    success: 'Promise resolved',\n    error: 'Promise rejected',\n    animationType: 'timing',\n    animationConfig: {\n      duration: 500,\n      flingPositionReturnDuration: 500,\n    },\n  }\n);\n\n"})})]})}function m(n={}){const{wrapper:i}={...(0,o.R)(),...n.components};return i?(0,a.jsx)(i,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,i,e)=>{e.d(i,{R:()=>s,x:()=>r});var t=e(6540);const a={},o=t.createContext(a);function s(n){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function r(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),t.createElement(o.Provider,{value:i},n.children)}}}]);